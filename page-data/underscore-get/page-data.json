{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/underscore-get/","result":{"data":{"site":{"siteMetadata":{"title":"Swapnil Mishra","social":[{"name":"twitter","url":"https://twitter.com/swapnil_mishra"},{"name":"github","url":"https://github.com/swapnilmishra"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"05868783-997d-5516-906b-6e807fdc5733","excerpt":"We often use  _.get()  function to safely retreive the properties inside deeply nested objects. I have seen codebases where underscore was…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Coding underscore get\",\n  \"date\": \"2017-01-30\",\n  \"layout\": \"post\",\n  \"path\": \"/underscore-get/\",\n  \"category\": \"Javascript\",\n  \"description\": \"We often use _.get() function to safely retreive the properties inside deeply nested objects. I have seen codebases where underscore was put in just because of this great utility function. So just thought of coding it and turns out its pretty easy and fun.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"We often use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_.get()\"), \" function to safely retreive the properties inside deeply nested objects. I have seen codebases where underscore was put in just because of this great utility function. So just thought of coding it and turns out its pretty easy. Below is the code to do it with comments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var underscore = {\\n  // @param objStr : dotted properties string e.g 'name.firstname.text'\\n  // @param targetObj : Object from which we need to extract the properties\\n  get : function get(objStr,targetObj){\\n  \\n    var i =0\\n    var keys = objStr.split('.') // split the keys by '.' character\\n    var obj;\\n    for(; i < keys.length; i++){\\n      if(!obj && i===0)\\n        obj = targetObj[keys[i]] // for first key get the value from the object\\n      else if(obj && obj[keys[i]])\\n        obj = obj[keys[i]] // for other keys get the value from the object formed so far\\n      else {\\n        obj = undefined // if object[keys[i]] is undefined break the loop as going ahead script will throw error as undefined[undefined] is error\\n        break;\\n      }\\n\\n    }\\n  \\n    return obj // return the final object\\n  }\\n  \\n}\\n\")), mdx(\"p\", null, \"You can test it by passing arbitrary properties and will work fine thereby returning undefined.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/underscore-get/","title":"Coding underscore get","tags":[],"keywords":[],"date":"January 30, 2017","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"5ff9c663-bf2a-5f0d-834a-5eb627a23802","excerpt":"I have always wondered how awesome tools like  jsbin ,  jsfiddle  or  dabblet  work. So, thought of putting together some code to do the…","slug":"/jsbin-clone/","title":"How to build pastebins like jsbin, jsfiddle, dabblet","date":"November 27, 2016"},"next":{"__typename":"MdxBlogPost","id":"2074cba8-e88e-54c0-b35f-595e50f3b5f9","excerpt":"A very basic  MobX  style Observers. This is not even scratching the surface w.r.t the actual library as there are so many other things…","slug":"/mobx-style-obervers/","title":"Mobx style observers","date":"February 03, 2017"}},"pageContext":{"id":"05868783-997d-5516-906b-6e807fdc5733","previousId":"5ff9c663-bf2a-5f0d-834a-5eb627a23802","nextId":"2074cba8-e88e-54c0-b35f-595e50f3b5f9"}}}