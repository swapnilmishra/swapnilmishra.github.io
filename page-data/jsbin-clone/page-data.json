{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/jsbin-clone/","result":{"data":{"site":{"siteMetadata":{"title":"Swapnil Mishra","social":[{"name":"twitter","url":"https://twitter.com/swapnil_mishra"},{"name":"github","url":"https://github.com/swapnilmishra"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"5ff9c663-bf2a-5f0d-834a-5eb627a23802","excerpt":"I have always wondered how awesome tools like  jsbin ,  jsfiddle  or  dabblet  work. So, thought of putting together some code to do the…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to build pastebins like jsbin, jsfiddle, dabblet\",\n  \"date\": \"2016-11-27\",\n  \"layout\": \"post\",\n  \"path\": \"/jsbin-clone/\",\n  \"category\": \"Frontend\",\n  \"description\": \"I have always wondered how awesome tools like jsbin, jsfiddle or dabblet work. So, thought of putting together some code to do the same.\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have always wondered how awesome tools like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"jsbin.com\"\n  }), \"jsbin\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jsfiddle.net\"\n  }), \"jsfiddle\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://dabblet.com/\"\n  }), \"dabblet\"), \" work. So, thought of putting together some code to do the same.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/swapnilmishra/jsbin-jsfiddle-clone/master/screenshot/screen.gif\",\n    \"alt\": \"alt text\",\n    \"title\": \"Demo run screenshot\"\n  }))), mdx(\"h3\", null, \"Show me some code\"), mdx(\"p\", null, \"It basically boils down to creating an iframe and injecting the content(html,css,js) to update. All the code to build this is on my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/swapnilmishra/jsbin-jsfiddle-clone\"\n  }), \"github repo\"), \". Below is the code from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/swapnilmishra/jsbin-jsfiddle-clone/blob/master/src/createIFrame.js\"\n  }), \"createIframe.js\"), \" file which takes raw HTML,JS,CSS and create an iframe from it there by showing the output.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let frameEl;\\nlet createFrame = function ({html,js,css}){\\n    // memoize frame element\\n    if(frameEl){\\n        frameEl.remove()\\n    }\\n    frameEl = document.createElement('iframe')\\n    const el = document.querySelector(\\\"#root\\\")\\n    frameEl.setAttribute(\\\"id\\\",\\\"iframe\\\")\\n    frameEl.setAttribute(\\\"class\\\",\\\"output\\\")    \\n    el.appendChild(frameEl)\\n    const doc = document.querySelector('#iframe').contentWindow.document\\n    const head = doc.querySelector(\\\"head\\\")\\n    doc.body.innerHTML = html;\\n    head.appendChild(createEl('script',js))\\n    head.appendChild(createEl('style',css))\\n}\\n\\nlet createEl = function(type,innerhtml){\\n    const el = document.createElement(type)\\n    el.innerHTML = innerhtml\\n    return el;\\n}\\n\")), mdx(\"h3\", null, \"How to run\"), mdx(\"p\", null, \"After cloing the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/swapnilmishra/jsbin-jsfiddle-clone\"\n  }), \"github repo\"), \" run given below commands.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"npm install\\nnpm start\\n\")), mdx(\"h3\", null, \"Tooling used\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://codemirror.net\"\n  }), \"Codemirror\"), \" - For syntax highlighting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://webpack.github.io/\"\n  }), \"Webpack\"), \" - For module building and livereload\")), mdx(\"h3\", null, \"What's not implemented here\"), mdx(\"p\", null, \"Whatever I have implemented here is the easiest thing to build for these type of tools. There are tons of other things which need to be done for a tool like this to work in production. In this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jsbin/jsbin/wiki/Best-practices-for-building-your-own-live-paste-bin\"\n  }), \"link\"), \", creator of jsbin(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/rem\"\n  }), \"Remy sharp\"), \"), jsfiddle(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/zalun\"\n  }), \"Piotr Zalewa\"), \") and dabblet(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/LeaVerou\"\n  }), \"Lea verou\"), \" ) discusses various best practices and security aspects which are very important.\"), mdx(\"p\", null, \"Few of the things which would be needed are :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handling user-accounts/login/signup/saving.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensuring the iframe is not used for XSS attacks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensuring the high availablity and concurrency in case of multiple concurrent edits.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JSbin(which is my favorite) also keeps history of every edit made.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linting CSS, JS, HTML.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support for preprocessors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Code collaboration using WebRTC.\")), mdx(\"p\", null, \"I have tried to shed some light on how these tools can be built and hope this would be useful to many of you. We are very fortunate to have these smart people who have built all these awesome tools which, makes our life so easy. Thats why the web is the most vibrant open source community.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/jsbin-clone/","title":"How to build pastebins like jsbin, jsfiddle, dabblet","tags":[],"keywords":[],"date":"November 27, 2016","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"09002c77-de48-5e0a-8534-4be740930725","excerpt":"What is a binary search tree? In a nutshell a binary search tree is a type of tree with property  left < parent < right  for every node…","slug":"/binary-search-tree/","title":"Building and walking a binary search tree","date":"October 18, 2016"},"next":{"__typename":"MdxBlogPost","id":"05868783-997d-5516-906b-6e807fdc5733","excerpt":"We often use  _.get()  function to safely retreive the properties inside deeply nested objects. I have seen codebases where underscore was…","slug":"/underscore-get/","title":"Coding underscore get","date":"January 30, 2017"}},"pageContext":{"id":"5ff9c663-bf2a-5f0d-834a-5eb627a23802","previousId":"09002c77-de48-5e0a-8534-4be740930725","nextId":"05868783-997d-5516-906b-6e807fdc5733"}}}